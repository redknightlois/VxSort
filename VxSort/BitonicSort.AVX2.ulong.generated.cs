/////////////////////////////////////////////////////////////////////////////
////
// This file was auto-generated by a tool at 2021-10-12 14:03:04
//
// It is recommended you DO NOT directly edit this file but instead edit
// the code-generator that generated this source file instead.
/////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using static System.Runtime.Intrinsics.X86.Avx;
using static System.Runtime.Intrinsics.X86.Avx2;
using static System.Runtime.Intrinsics.X86.Sse2;
using static System.Runtime.Intrinsics.X86.Sse41;
using static System.Runtime.Intrinsics.X86.Sse42;
using static VxSort.VectorExtensions;

namespace VxSort
{
    using V = Vector256<ulong>;
    static unsafe partial class BitonicSort
    {


        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_ascending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = d2i<ulong>(Shuffle(i2d(d01), i2d(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(min), i2d(max), 0xA));

            s = d2i<ulong>(Permute4x64(i2d(d01), 0x1B));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(min), i2d(max), 0xC));

            s = d2i<ulong>(Shuffle(i2d(d01), i2d(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(min), i2d(max), 0xA));
}

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_merge_ascending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = d2i<ulong>(Permute4x64(i2d(d01), 0x4E));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(min), i2d(max), 0xC));

            s = d2i<ulong>(Shuffle(i2d(d01), i2d(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(min), i2d(max), 0xA));
    }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_descending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = d2i<ulong>(Shuffle(i2d(d01), i2d(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(max), i2d(min), 0xA));

            s = d2i<ulong>(Permute4x64(i2d(d01), 0x1B));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(max), i2d(min), 0xC));

            s = d2i<ulong>(Shuffle(i2d(d01), i2d(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(max), i2d(min), 0xA));
}

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_merge_descending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = d2i<ulong>(Permute4x64(i2d(d01), 0x4E));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(max), i2d(min), 0xC));

            s = d2i<ulong>(Shuffle(i2d(d01), i2d(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = d2i<ulong>(BlendVariable(i2d(s), i2d(d01), i2d(cmp)));
            max = d2i<ulong>(BlendVariable(i2d(d01), i2d(s), i2d(cmp)));
            d01 = d2i<ulong>(Blend(i2d(max), i2d(min), 0xA));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_ascending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_01v_ascending(ref d01);
        sort_01v_descending(ref d02);

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_01v_merge_ascending(ref d01);
        sort_01v_merge_ascending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_descending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_01v_descending(ref d01);
        sort_01v_ascending(ref d02);

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_01v_merge_descending(ref d01);
        sort_01v_merge_descending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_merge_ascending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d02), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d02), i2d(cmp)));

        sort_01v_merge_ascending(ref d01);
        sort_01v_merge_ascending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_merge_descending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d02), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d02), i2d(cmp)));

        sort_01v_merge_descending(ref d01);
        sort_01v_merge_descending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_ascending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_ascending(ref d01, ref d02);
        sort_01v_descending(ref d03);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_01v_merge_ascending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_descending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_descending(ref d01, ref d02);
        sort_01v_ascending(ref d03);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_01v_merge_descending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_merge_ascending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d03), i2d(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_01v_merge_ascending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_merge_descending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d03), i2d(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_01v_merge_descending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_ascending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_ascending(ref d01, ref d02);
        sort_02v_descending(ref d03, ref d04);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_02v_merge_ascending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_descending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_descending(ref d01, ref d02);
        sort_02v_ascending(ref d03, ref d04);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_02v_merge_descending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d03), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d04), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d04 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d04), i2d(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_02v_merge_ascending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d03), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d03), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d04), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d04 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d04), i2d(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_02v_merge_descending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_descending(ref d05);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_ascending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_ascending(ref d05);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_descending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_ascending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_descending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_descending(ref d05, ref d06);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_ascending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_ascending(ref d05, ref d06);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_descending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d06), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_ascending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d06), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_descending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_descending(ref d05, ref d06, ref d07);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_ascending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_ascending(ref d05, ref d06, ref d07);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_descending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d06), i2d(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d03), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d07), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_ascending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d06), i2d(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d03), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d07), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_descending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_descending(ref d05, ref d06, ref d07, ref d08);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

            tmp = d08;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d08).AsInt64()).AsUInt64();
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_ascending(ref d05, ref d06, ref d07, ref d08);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

            tmp = d08;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d08).AsInt64()).AsUInt64();
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_descending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d06), i2d(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d03), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d07), i2d(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = d2i<ulong>(BlendVariable(i2d(d08), i2d(d04), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d08 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d08), i2d(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = d2i<ulong>(BlendVariable(i2d(d05), i2d(d01), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d05), i2d(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = d2i<ulong>(BlendVariable(i2d(d06), i2d(d02), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d06), i2d(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = d2i<ulong>(BlendVariable(i2d(d07), i2d(d03), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d07), i2d(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = d2i<ulong>(BlendVariable(i2d(d08), i2d(d04), i2d(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d08 = d2i<ulong>(BlendVariable(i2d(tmp), i2d(d08), i2d(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_descending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_09v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_descending(ref d09);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_merge_ascending(ref d09);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_09v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_ascending(ref d09);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_merge_descending(ref d09);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_10v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_descending(ref d09, ref d10);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_merge_ascending(ref d09, ref d10);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_10v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_ascending(ref d09, ref d10);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_merge_descending(ref d09, ref d10);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_11v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_descending(ref d09, ref d10, ref d11);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_merge_ascending(ref d09, ref d10, ref d11);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_11v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_ascending(ref d09, ref d10, ref d11);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_merge_descending(ref d09, ref d10, ref d11);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_12v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_descending(ref d09, ref d10, ref d11, ref d12);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_12v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_ascending(ref d09, ref d10, ref d11, ref d12);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_13v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_descending(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_13v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_14v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = d2i<ulong>(BlendVariable(i2d(d14), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_14v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = d2i<ulong>(BlendVariable(i2d(d14), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_15v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = d2i<ulong>(BlendVariable(i2d(d14), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = d2i<ulong>(BlendVariable(i2d(d15), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_15v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = d2i<ulong>(BlendVariable(i2d(d14), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = d2i<ulong>(BlendVariable(i2d(d15), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_16v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = d2i<ulong>(BlendVariable(i2d(d14), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = d2i<ulong>(BlendVariable(i2d(d15), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

            tmp = d16;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d16).AsInt64()).AsUInt64();
            d16 = d2i<ulong>(BlendVariable(i2d(d16), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_16v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = d2i<ulong>(BlendVariable(i2d(d09), i2d(d08), i2d(cmp)));
            d08 = d2i<ulong>(BlendVariable(i2d(d08), i2d(tmp), i2d(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = d2i<ulong>(BlendVariable(i2d(d10), i2d(d07), i2d(cmp)));
            d07 = d2i<ulong>(BlendVariable(i2d(d07), i2d(tmp), i2d(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = d2i<ulong>(BlendVariable(i2d(d11), i2d(d06), i2d(cmp)));
            d06 = d2i<ulong>(BlendVariable(i2d(d06), i2d(tmp), i2d(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = d2i<ulong>(BlendVariable(i2d(d12), i2d(d05), i2d(cmp)));
            d05 = d2i<ulong>(BlendVariable(i2d(d05), i2d(tmp), i2d(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = d2i<ulong>(BlendVariable(i2d(d13), i2d(d04), i2d(cmp)));
            d04 = d2i<ulong>(BlendVariable(i2d(d04), i2d(tmp), i2d(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = d2i<ulong>(BlendVariable(i2d(d14), i2d(d03), i2d(cmp)));
            d03 = d2i<ulong>(BlendVariable(i2d(d03), i2d(tmp), i2d(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = d2i<ulong>(BlendVariable(i2d(d15), i2d(d02), i2d(cmp)));
            d02 = d2i<ulong>(BlendVariable(i2d(d02), i2d(tmp), i2d(cmp)));

            tmp = d16;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d16).AsInt64()).AsUInt64();
            d16 = d2i<ulong>(BlendVariable(i2d(d16), i2d(d01), i2d(cmp)));
            d01 = d2i<ulong>(BlendVariable(i2d(d01), i2d(tmp), i2d(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
    }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_01v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = Or(MaskLoad(ptr + V.Count * 0, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_01v_ascending(ref d01);
      MaskStore(ptr +  V.Count * 0, mask, d01);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_02v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = Or(MaskLoad(ptr + V.Count * 1, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_02v_ascending(ref d01, ref d02);
      Store(ptr + V.Count * 0, d01);
      MaskStore(ptr +  V.Count * 1, mask, d02);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_03v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = Or(MaskLoad(ptr + V.Count * 2, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_03v_ascending(ref d01, ref d02, ref d03);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      MaskStore(ptr +  V.Count * 2, mask, d03);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_04v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = Or(MaskLoad(ptr + V.Count * 3, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      MaskStore(ptr +  V.Count * 3, mask, d04);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_05v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = Or(MaskLoad(ptr + V.Count * 4, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_05v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      MaskStore(ptr +  V.Count * 4, mask, d05);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_06v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = Or(MaskLoad(ptr + V.Count * 5, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_06v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      MaskStore(ptr +  V.Count * 5, mask, d06);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_07v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = Or(MaskLoad(ptr + V.Count * 6, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_07v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      MaskStore(ptr +  V.Count * 6, mask, d07);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_08v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = Or(MaskLoad(ptr + V.Count * 7, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      MaskStore(ptr +  V.Count * 7, mask, d08);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_09v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = Or(MaskLoad(ptr + V.Count * 8, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_09v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      MaskStore(ptr +  V.Count * 8, mask, d09);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_10v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = Or(MaskLoad(ptr + V.Count * 9, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_10v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      MaskStore(ptr +  V.Count * 9, mask, d10);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_11v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = Or(MaskLoad(ptr + V.Count * 10, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_11v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      MaskStore(ptr +  V.Count * 10, mask, d11);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_12v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = Or(MaskLoad(ptr + V.Count * 11, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_12v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      MaskStore(ptr +  V.Count * 11, mask, d12);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_13v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = Or(MaskLoad(ptr + V.Count * 12, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_13v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      MaskStore(ptr +  V.Count * 12, mask, d13);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_14v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = Or(MaskLoad(ptr + V.Count * 13, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_14v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      MaskStore(ptr +  V.Count * 13, mask, d14);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_15v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = Or(MaskLoad(ptr + V.Count * 14, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_15v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      MaskStore(ptr +  V.Count * 14, mask, d15);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_16v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = Or(MaskLoad(ptr + V.Count * 15, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      MaskStore(ptr +  V.Count * 15, mask, d16);
     }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
    public static void Sort(ulong* ptr, int length)
    {
        var fullvlength = length / V.Count;
        var remainder = (int) (length - fullvlength * V.Count);
        var v = fullvlength + ((remainder > 0) ? 1 : 0);
        
        switch (v) {
        case 1: sort_01v_alt(ptr, remainder); break;
        case 2: sort_02v_alt(ptr, remainder); break;
        case 3: sort_03v_alt(ptr, remainder); break;
        case 4: sort_04v_alt(ptr, remainder); break;
        case 5: sort_05v_alt(ptr, remainder); break;
        case 6: sort_06v_alt(ptr, remainder); break;
        case 7: sort_07v_alt(ptr, remainder); break;
        case 8: sort_08v_alt(ptr, remainder); break;
        case 9: sort_09v_alt(ptr, remainder); break;
        case 10: sort_10v_alt(ptr, remainder); break;
        case 11: sort_11v_alt(ptr, remainder); break;
        case 12: sort_12v_alt(ptr, remainder); break;
        case 13: sort_13v_alt(ptr, remainder); break;
        case 14: sort_14v_alt(ptr, remainder); break;
        case 15: sort_15v_alt(ptr, remainder); break;
        case 16: sort_16v_alt(ptr, remainder); break;
         }
     }

    };
}
    
