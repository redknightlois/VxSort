/////////////////////////////////////////////////////////////////////////////
////
// This file was auto-generated by a tool at 2022-12-01 13:12:25
//
// It is recommended you DO NOT directly edit this file but instead edit
// the code-generator that generated this source file instead.
/////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using static System.Runtime.Intrinsics.X86.Avx;
using static System.Runtime.Intrinsics.X86.Avx2;
using static System.Runtime.Intrinsics.X86.Sse2;
using static System.Runtime.Intrinsics.X86.Sse41;
using static System.Runtime.Intrinsics.X86.Sse42;

namespace VxSort
{
    using V = Vector256<ulong>;
    static unsafe partial class BitonicSort
    {


        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_ascending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = Vector256.AsUInt64(Shuffle(Vector256.AsDouble(d01), Vector256.AsDouble(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(min), Vector256.AsDouble(max), 0xA));

            s = Vector256.AsUInt64(Permute4x64(Vector256.AsDouble(d01), 0x1B));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(min), Vector256.AsDouble(max), 0xC));

            s = Vector256.AsUInt64(Shuffle(Vector256.AsDouble(d01), Vector256.AsDouble(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(min), Vector256.AsDouble(max), 0xA));
}

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_merge_ascending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = Vector256.AsUInt64(Permute4x64(Vector256.AsDouble(d01), 0x4E));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(min), Vector256.AsDouble(max), 0xC));

            s = Vector256.AsUInt64(Shuffle(Vector256.AsDouble(d01), Vector256.AsDouble(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(min), Vector256.AsDouble(max), 0xA));
    }

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_descending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = Vector256.AsUInt64(Shuffle(Vector256.AsDouble(d01), Vector256.AsDouble(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(max), Vector256.AsDouble(min), 0xA));

            s = Vector256.AsUInt64(Permute4x64(Vector256.AsDouble(d01), 0x1B));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(max), Vector256.AsDouble(min), 0xC));

            s = Vector256.AsUInt64(Shuffle(Vector256.AsDouble(d01), Vector256.AsDouble(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(max), Vector256.AsDouble(min), 0xA));
}

        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]
        public static void sort_01v_merge_descending(ref V d01) {
            V  min, max, s, cmp;
        V topBit = Vector256.Create(1UL << 63);

            s = Vector256.AsUInt64(Permute4x64(Vector256.AsDouble(d01), 0x4E));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(max), Vector256.AsDouble(min), 0xC));

            s = Vector256.AsUInt64(Shuffle(Vector256.AsDouble(d01), Vector256.AsDouble(d01), 0x5));
            cmp = CompareGreaterThan(Xor(topBit, s).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            min = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(s), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            max = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(s), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(Blend(Vector256.AsDouble(max), Vector256.AsDouble(min), 0xA));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_ascending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_01v_ascending(ref d01);
        sort_01v_descending(ref d02);

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_01v_merge_ascending(ref d01);
        sort_01v_merge_ascending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_descending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_01v_descending(ref d01);
        sort_01v_ascending(ref d02);

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_01v_merge_descending(ref d01);
        sort_01v_merge_descending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_merge_ascending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));

        sort_01v_merge_ascending(ref d01);
        sort_01v_merge_ascending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_02v_merge_descending(ref V d01, ref V d02) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));

        sort_01v_merge_descending(ref d01);
        sort_01v_merge_descending(ref d02);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_ascending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_ascending(ref d01, ref d02);
        sort_01v_descending(ref d03);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_01v_merge_ascending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_descending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_descending(ref d01, ref d02);
        sort_01v_ascending(ref d03);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_01v_merge_descending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_merge_ascending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_01v_merge_ascending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_03v_merge_descending(ref V d01, ref V d02, ref V d03) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_01v_merge_descending(ref d03);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_ascending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_ascending(ref d01, ref d02);
        sort_02v_descending(ref d03, ref d04);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_02v_merge_ascending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_descending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_02v_descending(ref d01, ref d02);
        sort_02v_ascending(ref d03, ref d04);

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_02v_merge_descending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));

        sort_02v_merge_ascending(ref d01, ref d02);
        sort_02v_merge_ascending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_04v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));

        sort_02v_merge_descending(ref d01, ref d02);
        sort_02v_merge_descending(ref d03, ref d04);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_descending(ref d05);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_ascending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_ascending(ref d05);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_descending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_ascending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_05v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_01v_merge_descending(ref d05);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_descending(ref d05, ref d06);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_ascending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_ascending(ref d05, ref d06);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_descending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_ascending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_06v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_02v_merge_descending(ref d05, ref d06);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_descending(ref d05, ref d06, ref d07);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_ascending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_ascending(ref d05, ref d06, ref d07);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_descending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_ascending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_07v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_03v_merge_descending(ref d05, ref d06, ref d07);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_descending(ref d05, ref d06, ref d07, ref d08);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d08;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d08).AsInt64()).AsUInt64();
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_04v_descending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_ascending(ref d05, ref d06, ref d07, ref d08);

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d08;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d08).AsInt64()).AsUInt64();
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_descending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));

        sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_08v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));

        sort_04v_merge_descending(ref d01, ref d02, ref d03, ref d04);
        sort_04v_merge_descending(ref d05, ref d06, ref d07, ref d08);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_09v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_descending(ref d09);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_merge_ascending(ref d09);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_09v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_ascending(ref d09);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_merge_descending(ref d09);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_09v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_merge_ascending(ref d09);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_09v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_01v_merge_descending(ref d09);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_10v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_descending(ref d09, ref d10);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_merge_ascending(ref d09, ref d10);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_10v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_ascending(ref d09, ref d10);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_merge_descending(ref d09, ref d10);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_10v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_merge_ascending(ref d09, ref d10);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_10v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_02v_merge_descending(ref d09, ref d10);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_11v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_descending(ref d09, ref d10, ref d11);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_merge_ascending(ref d09, ref d10, ref d11);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_11v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_ascending(ref d09, ref d10, ref d11);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_merge_descending(ref d09, ref d10, ref d11);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_11v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_merge_ascending(ref d09, ref d10, ref d11);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_11v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_03v_merge_descending(ref d09, ref d10, ref d11);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_12v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_descending(ref d09, ref d10, ref d11, ref d12);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_12v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_ascending(ref d09, ref d10, ref d11, ref d12);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_12v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_12v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_13v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_descending(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_13v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_13v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_13v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_05v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_14v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_14v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_14v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_14v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_06v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_15v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_15v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_15v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_15v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_07v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_16v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d16;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d16).AsInt64()).AsUInt64();
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_16v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_08v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);

            tmp = d09;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d09).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d10;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d10).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d11;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d11).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d12;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d12).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d13;
            cmp = CompareGreaterThan(Xor(topBit, d04).AsInt64(), Xor(topBit, d13).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d04), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d14;
            cmp = CompareGreaterThan(Xor(topBit, d03).AsInt64(), Xor(topBit, d14).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d03), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d15;
            cmp = CompareGreaterThan(Xor(topBit, d02).AsInt64(), Xor(topBit, d15).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d02), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d16;
            cmp = CompareGreaterThan(Xor(topBit, d01).AsInt64(), Xor(topBit, d16).AsInt64()).AsUInt64();
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d01), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_16v_merge_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));

            tmp = d08;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d08).AsInt64()).AsUInt64();
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));

        sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_16v_merge_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

            tmp = d01;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d01).AsInt64()).AsUInt64();
            d01 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(d01), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));

            tmp = d02;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d02).AsInt64()).AsUInt64();
            d02 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(d02), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));

            tmp = d03;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d03).AsInt64()).AsUInt64();
            d03 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(d03), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));

            tmp = d04;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d04).AsInt64()).AsUInt64();
            d04 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(d04), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));

            tmp = d05;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d05).AsInt64()).AsUInt64();
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));

            tmp = d06;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d06).AsInt64()).AsUInt64();
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));

            tmp = d07;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d07).AsInt64()).AsUInt64();
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));

            tmp = d08;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d08).AsInt64()).AsUInt64();
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, tmp).AsInt64()).AsUInt64();
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(tmp), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));

        sort_08v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
        sort_08v_merge_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_17v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_01v_descending(ref d17);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_01v_merge_ascending(ref d17);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_17v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_01v_ascending(ref d17);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_01v_merge_descending(ref d17);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_18v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_02v_descending(ref d17, ref d18);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_02v_merge_ascending(ref d17, ref d18);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_18v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_02v_ascending(ref d17, ref d18);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_02v_merge_descending(ref d17, ref d18);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_19v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_03v_descending(ref d17, ref d18, ref d19);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_03v_merge_ascending(ref d17, ref d18, ref d19);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_19v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_03v_ascending(ref d17, ref d18, ref d19);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_03v_merge_descending(ref d17, ref d18, ref d19);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_20v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_04v_descending(ref d17, ref d18, ref d19, ref d20);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_04v_merge_ascending(ref d17, ref d18, ref d19, ref d20);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_20v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_04v_ascending(ref d17, ref d18, ref d19, ref d20);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_04v_merge_descending(ref d17, ref d18, ref d19, ref d20);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_21v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_05v_descending(ref d17, ref d18, ref d19, ref d20, ref d21);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_05v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_21v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_05v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_05v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_22v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_06v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_06v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_22v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_06v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_06v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_23v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_07v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_07v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_23v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_07v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_07v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_24v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_08v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_08v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_24v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_08v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_08v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_25v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_09v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_09v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_25v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_09v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_09v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_26v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25, ref V d26) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_10v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d26;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d26).AsInt64()).AsUInt64();
            d26 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d26), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_10v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_26v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25, ref V d26) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_10v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d26;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d26).AsInt64()).AsUInt64();
            d26 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d26), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_10v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_27v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25, ref V d26, ref V d27) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_11v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d26;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d26).AsInt64()).AsUInt64();
            d26 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d26), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d27;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d27).AsInt64()).AsUInt64();
            d27 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d27), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_11v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_27v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25, ref V d26, ref V d27) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_11v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d26;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d26).AsInt64()).AsUInt64();
            d26 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d26), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d27;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d27).AsInt64()).AsUInt64();
            d27 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d27), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_11v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_28v_ascending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25, ref V d26, ref V d27, ref V d28) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_12v_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27, ref d28);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d26;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d26).AsInt64()).AsUInt64();
            d26 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d26), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d27;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d27).AsInt64()).AsUInt64();
            d27 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d27), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d28;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d28).AsInt64()).AsUInt64();
            d28 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d28), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_12v_merge_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27, ref d28);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]        
    private static void sort_28v_descending(ref V d01, ref V d02, ref V d03, ref V d04, ref V d05, ref V d06, ref V d07, ref V d08, ref V d09, ref V d10, ref V d11, ref V d12, ref V d13, ref V d14, ref V d15, ref V d16, ref V d17, ref V d18, ref V d19, ref V d20, ref V d21, ref V d22, ref V d23, ref V d24, ref V d25, ref V d26, ref V d27, ref V d28) {
        V  tmp, cmp;
        V topBit = Vector256.Create(1UL << 63);

        sort_16v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_12v_ascending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27, ref d28);

            tmp = d17;
            cmp = CompareGreaterThan(Xor(topBit, d16).AsInt64(), Xor(topBit, d17).AsInt64()).AsUInt64();
            d17 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d17), Vector256.AsDouble(d16), Vector256.AsDouble(cmp)));
            d16 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d16), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d18;
            cmp = CompareGreaterThan(Xor(topBit, d15).AsInt64(), Xor(topBit, d18).AsInt64()).AsUInt64();
            d18 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d18), Vector256.AsDouble(d15), Vector256.AsDouble(cmp)));
            d15 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d15), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d19;
            cmp = CompareGreaterThan(Xor(topBit, d14).AsInt64(), Xor(topBit, d19).AsInt64()).AsUInt64();
            d19 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d19), Vector256.AsDouble(d14), Vector256.AsDouble(cmp)));
            d14 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d14), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d20;
            cmp = CompareGreaterThan(Xor(topBit, d13).AsInt64(), Xor(topBit, d20).AsInt64()).AsUInt64();
            d20 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d20), Vector256.AsDouble(d13), Vector256.AsDouble(cmp)));
            d13 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d13), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d21;
            cmp = CompareGreaterThan(Xor(topBit, d12).AsInt64(), Xor(topBit, d21).AsInt64()).AsUInt64();
            d21 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d21), Vector256.AsDouble(d12), Vector256.AsDouble(cmp)));
            d12 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d12), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d22;
            cmp = CompareGreaterThan(Xor(topBit, d11).AsInt64(), Xor(topBit, d22).AsInt64()).AsUInt64();
            d22 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d22), Vector256.AsDouble(d11), Vector256.AsDouble(cmp)));
            d11 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d11), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d23;
            cmp = CompareGreaterThan(Xor(topBit, d10).AsInt64(), Xor(topBit, d23).AsInt64()).AsUInt64();
            d23 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d23), Vector256.AsDouble(d10), Vector256.AsDouble(cmp)));
            d10 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d10), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d24;
            cmp = CompareGreaterThan(Xor(topBit, d09).AsInt64(), Xor(topBit, d24).AsInt64()).AsUInt64();
            d24 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d24), Vector256.AsDouble(d09), Vector256.AsDouble(cmp)));
            d09 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d09), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d25;
            cmp = CompareGreaterThan(Xor(topBit, d08).AsInt64(), Xor(topBit, d25).AsInt64()).AsUInt64();
            d25 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d25), Vector256.AsDouble(d08), Vector256.AsDouble(cmp)));
            d08 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d08), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d26;
            cmp = CompareGreaterThan(Xor(topBit, d07).AsInt64(), Xor(topBit, d26).AsInt64()).AsUInt64();
            d26 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d26), Vector256.AsDouble(d07), Vector256.AsDouble(cmp)));
            d07 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d07), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d27;
            cmp = CompareGreaterThan(Xor(topBit, d06).AsInt64(), Xor(topBit, d27).AsInt64()).AsUInt64();
            d27 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d27), Vector256.AsDouble(d06), Vector256.AsDouble(cmp)));
            d06 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d06), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

            tmp = d28;
            cmp = CompareGreaterThan(Xor(topBit, d05).AsInt64(), Xor(topBit, d28).AsInt64()).AsUInt64();
            d28 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d28), Vector256.AsDouble(d05), Vector256.AsDouble(cmp)));
            d05 = Vector256.AsUInt64(BlendVariable(Vector256.AsDouble(d05), Vector256.AsDouble(tmp), Vector256.AsDouble(cmp)));

        sort_16v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
        sort_12v_merge_descending(ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27, ref d28);
    }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_01v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = Or(MaskLoad(ptr + V.Count * 0, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_01v_ascending(ref d01);
      MaskStore(ptr +  V.Count * 0, mask, d01);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_02v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = Or(MaskLoad(ptr + V.Count * 1, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_02v_ascending(ref d01, ref d02);
      Store(ptr + V.Count * 0, d01);
      MaskStore(ptr +  V.Count * 1, mask, d02);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_03v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = Or(MaskLoad(ptr + V.Count * 2, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_03v_ascending(ref d01, ref d02, ref d03);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      MaskStore(ptr +  V.Count * 2, mask, d03);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_04v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = Or(MaskLoad(ptr + V.Count * 3, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      MaskStore(ptr +  V.Count * 3, mask, d04);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_05v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = Or(MaskLoad(ptr + V.Count * 4, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_05v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      MaskStore(ptr +  V.Count * 4, mask, d05);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_06v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = Or(MaskLoad(ptr + V.Count * 5, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_06v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      MaskStore(ptr +  V.Count * 5, mask, d06);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_07v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = Or(MaskLoad(ptr + V.Count * 6, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_07v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      MaskStore(ptr +  V.Count * 6, mask, d07);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_08v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = Or(MaskLoad(ptr + V.Count * 7, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      MaskStore(ptr +  V.Count * 7, mask, d08);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_09v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = Or(MaskLoad(ptr + V.Count * 8, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_09v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      MaskStore(ptr +  V.Count * 8, mask, d09);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_10v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = Or(MaskLoad(ptr + V.Count * 9, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_10v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      MaskStore(ptr +  V.Count * 9, mask, d10);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_11v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = Or(MaskLoad(ptr + V.Count * 10, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_11v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      MaskStore(ptr +  V.Count * 10, mask, d11);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_12v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = Or(MaskLoad(ptr + V.Count * 11, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_12v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      MaskStore(ptr +  V.Count * 11, mask, d12);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_13v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = Or(MaskLoad(ptr + V.Count * 12, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_13v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      MaskStore(ptr +  V.Count * 12, mask, d13);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_14v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = Or(MaskLoad(ptr + V.Count * 13, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_14v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      MaskStore(ptr +  V.Count * 13, mask, d14);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_15v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = Or(MaskLoad(ptr + V.Count * 14, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_15v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      MaskStore(ptr +  V.Count * 14, mask, d15);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_16v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = Or(MaskLoad(ptr + V.Count * 15, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      MaskStore(ptr +  V.Count * 15, mask, d16);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_17v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = Or(MaskLoad(ptr + V.Count * 16, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_17v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      MaskStore(ptr +  V.Count * 16, mask, d17);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_18v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = Or(MaskLoad(ptr + V.Count * 17, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_18v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      MaskStore(ptr +  V.Count * 17, mask, d18);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_19v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = Or(MaskLoad(ptr + V.Count * 18, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_19v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      MaskStore(ptr +  V.Count * 18, mask, d19);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_20v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = Or(MaskLoad(ptr + V.Count * 19, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_20v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      MaskStore(ptr +  V.Count * 19, mask, d20);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_21v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = Or(MaskLoad(ptr + V.Count * 20, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_21v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      MaskStore(ptr +  V.Count * 20, mask, d21);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_22v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = Or(MaskLoad(ptr + V.Count * 21, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_22v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      MaskStore(ptr +  V.Count * 21, mask, d22);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_23v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = LoadVector256(ptr + V.Count * 21);
      V d23 = Or(MaskLoad(ptr + V.Count * 22, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_23v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      Store(ptr + V.Count * 21, d22);
      MaskStore(ptr +  V.Count * 22, mask, d23);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_24v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = LoadVector256(ptr + V.Count * 21);
      V d23 = LoadVector256(ptr + V.Count * 22);
      V d24 = Or(MaskLoad(ptr + V.Count * 23, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_24v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      Store(ptr + V.Count * 21, d22);
      Store(ptr + V.Count * 22, d23);
      MaskStore(ptr +  V.Count * 23, mask, d24);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_25v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = LoadVector256(ptr + V.Count * 21);
      V d23 = LoadVector256(ptr + V.Count * 22);
      V d24 = LoadVector256(ptr + V.Count * 23);
      V d25 = Or(MaskLoad(ptr + V.Count * 24, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_25v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      Store(ptr + V.Count * 21, d22);
      Store(ptr + V.Count * 22, d23);
      Store(ptr + V.Count * 23, d24);
      MaskStore(ptr +  V.Count * 24, mask, d25);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_26v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = LoadVector256(ptr + V.Count * 21);
      V d23 = LoadVector256(ptr + V.Count * 22);
      V d24 = LoadVector256(ptr + V.Count * 23);
      V d25 = LoadVector256(ptr + V.Count * 24);
      V d26 = Or(MaskLoad(ptr + V.Count * 25, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_26v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      Store(ptr + V.Count * 21, d22);
      Store(ptr + V.Count * 22, d23);
      Store(ptr + V.Count * 23, d24);
      Store(ptr + V.Count * 24, d25);
      MaskStore(ptr +  V.Count * 25, mask, d26);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_27v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = LoadVector256(ptr + V.Count * 21);
      V d23 = LoadVector256(ptr + V.Count * 22);
      V d24 = LoadVector256(ptr + V.Count * 23);
      V d25 = LoadVector256(ptr + V.Count * 24);
      V d26 = LoadVector256(ptr + V.Count * 25);
      V d27 = Or(MaskLoad(ptr + V.Count * 26, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_27v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      Store(ptr + V.Count * 21, d22);
      Store(ptr + V.Count * 22, d23);
      Store(ptr + V.Count * 23, d24);
      Store(ptr + V.Count * 24, d25);
      Store(ptr + V.Count * 25, d26);
      MaskStore(ptr +  V.Count * 26, mask, d27);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_28v_alt(ulong *ptr, int remainder) 
        {        
            var mask = ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)).AsUInt64();

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = LoadVector256(ptr + V.Count * 19);
      V d21 = LoadVector256(ptr + V.Count * 20);
      V d22 = LoadVector256(ptr + V.Count * 21);
      V d23 = LoadVector256(ptr + V.Count * 22);
      V d24 = LoadVector256(ptr + V.Count * 23);
      V d25 = LoadVector256(ptr + V.Count * 24);
      V d26 = LoadVector256(ptr + V.Count * 25);
      V d27 = LoadVector256(ptr + V.Count * 26);
      V d28 = Or(MaskLoad(ptr + V.Count * 27, mask), AndNot(mask, Vector256.Create(ulong.MaxValue)));
      sort_28v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20, ref d21, ref d22, ref d23, ref d24, ref d25, ref d26, ref d27, ref d28);
      Store(ptr + V.Count * 0, d01);
      Store(ptr + V.Count * 1, d02);
      Store(ptr + V.Count * 2, d03);
      Store(ptr + V.Count * 3, d04);
      Store(ptr + V.Count * 4, d05);
      Store(ptr + V.Count * 5, d06);
      Store(ptr + V.Count * 6, d07);
      Store(ptr + V.Count * 7, d08);
      Store(ptr + V.Count * 8, d09);
      Store(ptr + V.Count * 9, d10);
      Store(ptr + V.Count * 10, d11);
      Store(ptr + V.Count * 11, d12);
      Store(ptr + V.Count * 12, d13);
      Store(ptr + V.Count * 13, d14);
      Store(ptr + V.Count * 14, d15);
      Store(ptr + V.Count * 15, d16);
      Store(ptr + V.Count * 16, d17);
      Store(ptr + V.Count * 17, d18);
      Store(ptr + V.Count * 18, d19);
      Store(ptr + V.Count * 19, d20);
      Store(ptr + V.Count * 20, d21);
      Store(ptr + V.Count * 21, d22);
      Store(ptr + V.Count * 22, d23);
      Store(ptr + V.Count * 23, d24);
      Store(ptr + V.Count * 24, d25);
      Store(ptr + V.Count * 25, d26);
      Store(ptr + V.Count * 26, d27);
      MaskStore(ptr +  V.Count * 27, mask, d28);
     }
                
                                               
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static void Sort(ulong* ptr, int length)
        {                    
            uint fullvlength = (uint)length / (uint)V.Count;
            var remainder = (int)(length - fullvlength * V.Count);
            var v = fullvlength + ((remainder > 0) ? 1 : 0);
            switch (v)
            {
                
				case 1: sort_01v_alt(ptr, remainder); return; 
				case 2: sort_02v_alt(ptr, remainder); return; 
				case 3: sort_03v_alt(ptr, remainder); return; 
				case 4: sort_04v_alt(ptr, remainder); return; 
				case 5: sort_05v_alt(ptr, remainder); return; 
				case 6: sort_06v_alt(ptr, remainder); return; 
				case 7: sort_07v_alt(ptr, remainder); return; 
				case 8: sort_08v_alt(ptr, remainder); return; 
				case 9: sort_09v_alt(ptr, remainder); return; 
				case 10: sort_10v_alt(ptr, remainder); return; 
				case 11: sort_11v_alt(ptr, remainder); return; 
				case 12: sort_12v_alt(ptr, remainder); return; 
				case 13: sort_13v_alt(ptr, remainder); return; 
				case 14: sort_14v_alt(ptr, remainder); return; 
				case 15: sort_15v_alt(ptr, remainder); return; 
				case 16: sort_16v_alt(ptr, remainder); return; 
				case 17: sort_17v_alt(ptr, remainder); return; 
				case 18: sort_18v_alt(ptr, remainder); return; 
				case 19: sort_19v_alt(ptr, remainder); return; 
				case 20: sort_20v_alt(ptr, remainder); return; 
				case 21: sort_21v_alt(ptr, remainder); return; 
				case 22: sort_22v_alt(ptr, remainder); return; 
				case 23: sort_23v_alt(ptr, remainder); return; 
				case 24: sort_24v_alt(ptr, remainder); return; 
				case 25: sort_25v_alt(ptr, remainder); return; 
				case 26: sort_26v_alt(ptr, remainder); return; 
				case 27: sort_27v_alt(ptr, remainder); return; 
				case 28: sort_28v_alt(ptr, remainder); return; 
              
            }
        }

    };
}
    
